package SeleniumDSL;

import java.lang.reflect.Type;

import com.google.gson.stream.JsonReader;
//import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;

import java.util.Map;

public class TargetDeserialiser implements JsonDeserializer<Target> {
        public static final String TARGET = "target";
        public static final String VALUE = "value";
        public static final String TYPE = "type";
        //public static final String COMMAND = "command";

        Map<String, ProcessingMethod> valueMap = (new ValueMapper()).getMap();;

        @Override
        public Target deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
                String targetPath = json.getAsJsonObject().get(TARGET).getAsString();
                TargetType type = TargetType.valueOf(json.getAsJsonObject().get(TYPE).getAsString());
                Target target;
                if(type == TargetType.COMMAND){
                        String command = json.getAsJsonObject().get(VALUE).getAsString();
                        target = new Target(targetPath, command, type);
                } else {
                        String value = valueParser(json.getAsJsonObject().get(VALUE).getAsString());
                        target = new Target(targetPath, value, type);
                }

                return target;
        }

        public String valueParser(String value){
                for (String key : valueMap.keySet()) {
                        if(key.equals(value)){
                                return valueMap.get(key).method();
                        }
                }

                return value;
        }

	public String parseValue(String value){
                for (String key : valueMap.keySet()) {
                        if(key.equals(value)){
                                return valueMap.get(key).method();
                        }
                }

                return value;
        }
}

